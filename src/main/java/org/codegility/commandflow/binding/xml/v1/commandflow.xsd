<?xml version="1.0" encoding="UTF-8"?>
<schema xmlns="http://www.w3.org/2001/XMLSchema" targetNamespace="http://codegility.org/commandflow/1" xmlns:tns="http://codegility.org/commandflow/1"
  elementFormDefault="qualified">

  <complexType name="commandsType">
    <choice minOccurs="0" maxOccurs="unbounded">
      <element name="import" type="tns:importType">
        <annotation>
          <documentation>Imports another command XML file.</documentation>
        </annotation>
      </element>
      <element name="command" type="tns:commandType">
        <annotation>
          <documentation>
            Defines either a simple (non-composite) command (via 'class' or 'value') or a reference ('ref') to any other named command .
            Only one of attributes 'class', 'value' or 'ref' must be specified. Attribute 'name' is optional, it must however be specified if the
            command is on top-level.
            @see commandflow.Command
            @see commandflow.catalog.CommandReference
            </documentation>
        </annotation>
      </element>
      <element name="sequence" type="tns:compositeCommandType">
        <annotation>
          <documentation>
            Defines a sequence of commands executed in the order they are defined. This is the default command assumed for contained
            commands within other commands, hence it can omitted except if defined on top-level.
            @see commandflow.command.SequenceCommand
          </documentation>
        </annotation>
      </element>
      <element name="not" type="tns:compositeCommandType">
        <annotation>
          <documentation>
            Negation command, it negates the command status of the wrapped command(s). If it wraps more than one command, the wrapped
            commands are coerced into a sequence command.
            @see commandflow.command.NotCommand
            </documentation>
        </annotation>
      </element>
      <element name="or" type="tns:compositeCommandType">
        <annotation>
          <documentation>
            Short-circuit or command, it executes until the first command with command status true at which point it halts the execution.
            Semantically it behaves as the java '||' operator.
            @see commandflow.command.OrCommand
            </documentation>
        </annotation>
      </element>
      <element name="and" type="tns:compositeCommandType">
        <annotation>
          <documentation>
            Short-circuit and command, it executes until the first command with command status false at which point it halts the
            execution.
            Semantically it behaves as the java '&amp;&amp;' operator.
            @see commandflow.command.OrCommand
            </documentation>
        </annotation>
      </element>
      <element name="if" type="tns:conditionalType">
        <annotation>
          <documentation>
            Conditional (1-branch) if command. Wrapped command(s) is evaluated if the condition ('class', 'ref' or 'value') is true. If
            it wraps more than one command, the wrapped commands are coerced into a sequence command.
            @see commandflow.command.IfCommand
          </documentation>
        </annotation>
      </element>
      <element name="while" type="tns:conditionalType">
        <annotation>
          <documentation>
            Conditional while command. Wrapped command(s) are evaluated in a loop while condition ('class', 'ref' or 'value') is true. If
            it wraps more than one command, the wrapped commands are coerced into a sequence command.
            @see commandflow.command.WhileCommand
          </documentation>
        </annotation>
      </element>
      <element name="doWhile" type="tns:conditionalType">
        <annotation>
          <documentation>
            Conditional do-while command. Wrapped command(s) are evaluated in a loop while condition ('class', 'ref' or 'value') which is
            evaluated after each loop is true. If it wraps more than one command, the wrapped commands are coerced into a sequence command.
            @see
            commandflow.command.DoWhileCommand
            </documentation>
        </annotation>
      </element>
      <element name="parallel" type="tns:compositeCommandType">
        <annotation>
          <documentation>
            Parallel execution of a set of commands.
            @see commandflow.command.ParallelCommand
          </documentation>
        </annotation>
      </element>
      <element name="parallelOr" type="tns:compositeCommandType">
        <annotation>
          <documentation>
            Parallel or execution of a set of commands. The first command to return command status true halts the termination and the
            execution of the remaining commands is canceled (on a best try basis).
            @see commandflow.command.ParallelOrCommand
            </documentation>
        </annotation>
      </element>
      <element name="parallelAnd" type="tns:compositeCommandType">
        <annotation>
          <documentation>
            Parallel and execution of a set of commands. The first command to return command status false halts the termination and the
            execution of the remaining commands is canceled (on a best try basis).
            @see commandflow.command.ParallelAndCommand
            </documentation>
        </annotation>
      </element>
      </choice>
  </complexType>

  <element name="commands" type="tns:commandsType" />

  <complexType name="commandType">
    <sequence>
      <element name="property" type="tns:propertyType" minOccurs="0" maxOccurs="unbounded"></element>
    </sequence>
    <attributeGroup ref="tns:commonCommandAttributes" />
  </complexType>

  <complexType name="compositeCommandType">
    <complexContent>
      <extension base="tns:commandsType">
        <attribute name="name" type="string" use="optional">
          <annotation>
            <documentation>The optional name of the command. If the command is defined on top-level the name must be specified.</documentation>
          </annotation>
        </attribute>
      </extension>
    </complexContent>
  </complexType>

  <complexType name="conditionalType">
    <complexContent>
      <extension base="tns:commandsType">
        <attributeGroup ref="tns:commonCommandAttributes" />
      </extension>
    </complexContent>
  </complexType>

  <attributeGroup name="commonCommandAttributes">
    <attribute name="name" type="string" use="optional">
      <annotation>
        <documentation>
          The optional name of the command. If the command is defined on top-level the name must be specified.
        </documentation>
      </annotation>
    </attribute>
    <attribute name="class" type="string" use="optional">
      <annotation>
        <documentation>
          The fully qualified java class name of the command implementation, the class must implement the Command interface or be
          annotated with the @Command annotation.
          If the attribute is specified neither 'value' nor 'ref' may be used.
          @see commandflow.Command
          @see
          commandflow.annotation.Command
        </documentation>
      </annotation>
    </attribute>
    <attribute name="value" type="string" use="optional">
      <annotation>
        <documentation>
          An inline EL expression which must evaluate to a boolean value. By default Javascript is used, it is however possible to use
          other scripting languages. The EL expression must be contained in a #{expression}. It possible to use the static values 'true' or
          'false' which will be parsed as a boolean.
          If the attribute is specified neither 'class' nor 'ref' may be used.</documentation>
      </annotation>
    </attribute>
    <attribute name="ref" type="string" use="optional">
      <annotation>
        <documentation>
          Defines a reference to another named command.
          @see commandflow.catalog.CommandReference
        </documentation>
      </annotation>
    </attribute>
    <attribute name="dynamicRef" type="boolean" default="false">
      <annotation>
        <documentation>
          Defines a dynamic reference to another named command which is resolved at execution time. This attribute may only be used if 'ref' is defined.
          Default is 'false' meaning a static reference is created which is resolved during catalog 'linking'.
          @see commandflow.catalog.CommandReference</documentation>
      </annotation>
    </attribute>
  </attributeGroup>


    <complexType name="importType">
      <attribute name="resource" type="string">
        <annotation>
          <documentation>Defines the resource to import. The same syntax as the Spring Resource interface may used, examples:
- classpath:org/codegility/commandflow/bind/xml/v1/command.xml
- file:/opt/commandflow/command.xml
- http://codegility.org/commandflow/examples/command.xml
If the prefix is omitted the resource is assumed to be a classpath resource.</documentation>
        </annotation></attribute>
    </complexType>


    <complexType name="propertyType">
      <sequence minOccurs="0" maxOccurs="1">
        <element name="name" type="string"></element>
        <element name="value" type="string"></element>
      </sequence>
      <attribute name="name" type="string"></attribute>
      <attribute name="value" type="string"></attribute>
    </complexType>
</schema>